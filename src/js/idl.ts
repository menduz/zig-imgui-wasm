
// THIS FILE IS AUTOGENERATED USING "make idl"

export type ImguiWasmImports = {
  env: {
    // pub extern "env" fn atan2f(x: f32, y: f32) f32;
    atan2f(x: number, y: number): number
    // pub extern "env" fn powf(x: f32, y: f32) f32;
    powf(x: number, y: number): number
    // pub extern "env" fn acosf(x: f32) f32;
    acosf(x: number): number
    // pub extern "env" fn __stack_chk_fail() void;
    __stack_chk_fail(): void
    // pub extern "env" fn __assert_fail(a: i32, b: i32, c: i32, d: i32) void;
    __assert_fail(a: number, b: number, c: number, d: number): void
    // pub extern "env" fn toupper(char: i32) i32;
    toupper(char: number): number
    // pub extern "env" fn printf(a: i32, b: i32) i32;
    printf(a: number, b: number): number
    // pub extern "env" fn sscanf(a: i32, b: i32) i32;
    sscanf(a: number, b: number): number
    // pub extern "env" fn fflush(a: i32) i32;
    fflush(a: number): number
  }
  stdx: {
    // pub extern "stdx" fn jsPanic(ptr: *const u8, len: u32) void;
    jsPanic(ptr: number, len: number): void
    // pub extern "stdx" fn jsWarn(ptr: *const u8, len: u32) void;
    jsWarn(ptr: number, len: number): void
    // pub extern "stdx" fn jsLog(ptr: *const u8, len: u32) void;
    jsLog(ptr: number, len: number): void
    // pub extern "stdx" fn jsErr(ptr: *const u8, len: u32) void;
    jsErr(ptr: number, len: number): void
  }
  graphics: {
    // pub extern "graphics" fn jsSetCanvasBuffer(width: u32, height: u32) f32;
    jsSetCanvasBuffer(width: number, height: number): number
    // pub extern "graphics" fn glGetAttribLocation(program: u32, name: *const u8) i32;
    glGetAttribLocation(program: number, name: number): number
    // pub extern "graphics" fn glGetVertexAttribfv(index: u32, pname: u32, name: [*c]const f32) void;
    glGetVertexAttribfv(index: number, pname: number, name: number): void
    // pub extern "graphics" fn glGetVertexAttribiv(index: u32, pname: u32, name: ?*const i32) void;
    glGetVertexAttribiv(index: number, pname: number, name: number): void
    // pub extern "graphics" fn glGetVertexAttribPointerv(index: u32, pname: u32, pointer_pointer: ?*const anyopaque) void;
    glGetVertexAttribPointerv(index: number, pname: number, pointer_pointer: number): void
    // pub extern "graphics" fn glDisableVertexAttribArray(index: u32) void;
    glDisableVertexAttribArray(index: number): void
    // pub extern "graphics" fn jsGlBlendEquationSeparate(modeRGB: u32, modeAlpha: u32) void;
    jsGlBlendEquationSeparate(modeRGB: number, modeAlpha: number): void
    // pub extern "graphics" fn jsGlBlendFuncSeparate(srcRGB: u32, dstRGB: u32, srcAlpha: u32, dstAlpha: u32) void;
    jsGlBlendFuncSeparate(srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void
    // pub extern "graphics" fn jsGlPixelStorei(pname: u32, param: i32) void;
    jsGlPixelStorei(pname: number, param: number): void
    // pub extern "graphics" fn jsGlIsEnabled(target: u32) u32;
    jsGlIsEnabled(target: number): number
    // pub extern "graphics" fn jsGlBufferData(target: u32, data_size: u32, data: ?*const anyopaque, usage: u32) void;
    jsGlBufferData(target: number, data_size: number, data: number, usage: number): void
    // pub extern "graphics" fn jsGlBufferSubData(target: u32, offset: i32, data_size: u32, data: ?*const anyopaque) void;
    jsGlBufferSubData(target: number, offset: number, data_size: number, data: number): void
    // pub extern "graphics" fn jsGlCreateTexture() u32;
    jsGlCreateTexture(): number
    // pub extern "graphics" fn jsGlEnable(cap: u32) void;
    jsGlEnable(cap: number): void
    // pub extern "graphics" fn jsGlDisable(cap: u32) void;
    jsGlDisable(cap: number): void
    // pub extern "graphics" fn jsGlFrontFace(mode: u32) void;
    jsGlFrontFace(mode: number): void
    // pub extern "graphics" fn jsGlBindTexture(target: u32, texture: u32) void;
    jsGlBindTexture(target: number, texture: number): void
    // pub extern "graphics" fn jsGlClearColor(r: f32, g: f32, b: f32, a: f32) void;
    jsGlClearColor(r: number, g: number, b: number, a: number): void
    // pub extern "graphics" fn jsGlGetParameterInt(tag: u32) i32;
    jsGlGetParameterInt(tag: number): number
    // pub extern "graphics" fn jsGlGetFrameBufferBinding() u32;
    jsGlGetFrameBufferBinding(): number
    // pub extern "graphics" fn jsGlCreateFramebuffer() u32;
    jsGlCreateFramebuffer(): number
    // pub extern "graphics" fn jsGlBindFramebuffer(target: u32, framebuffer: u32) void;
    jsGlBindFramebuffer(target: number, framebuffer: number): void
    // pub extern "graphics" fn jsGlBindRenderbuffer(target: u32, renderbuffer: u32) void;
    jsGlBindRenderbuffer(target: number, renderbuffer: number): void
    // pub extern "graphics" fn jsGlRenderbufferStorageMultisample(target: u32, samples: i32, internalformat: u32, width: i32, height: i32) void;
    jsGlRenderbufferStorageMultisample(target: number, samples: number, internalformat: number, width: number, height: number): void
    // pub extern "graphics" fn jsGlBindVertexArray(array: u32) void;
    jsGlBindVertexArray(array: number): void
    // pub extern "graphics" fn jsGlBindBuffer(target: u32, buffer: u32) void;
    jsGlBindBuffer(target: number, buffer: number): void
    // pub extern "graphics" fn jsGlEnableVertexAttribArray(index: u32) void;
    jsGlEnableVertexAttribArray(index: number): void
    // pub extern "graphics" fn jsGlCreateShader(shaderType: u32) u32;
    jsGlCreateShader(shaderType: number): number
    // pub extern "graphics" fn jsGlShaderSource(shader: u32, count: u32, src_ptr: ?*const anyopaque, src_len_ptr: ?*const anyopaque) void;
    jsGlShaderSource(shader: number, count: number, src_ptr: number, src_len_ptr: number): void
    // pub extern "graphics" fn jsGlCompileShader(shader: u32) void;
    jsGlCompileShader(shader: number): void
    // pub extern "graphics" fn jsGlGetShaderParameterInt(shader: u32, pname: u32) i32;
    jsGlGetShaderParameterInt(shader: number, pname: number): number
    // pub extern "graphics" fn jsGlGetShaderInfoLog(shader: u32, buf_size: u32, log_ptr: *u8) u32;
    jsGlGetShaderInfoLog(shader: number, buf_size: number, log_ptr: number): number
    // pub extern "graphics" fn jsGlDeleteShader(shader: u32) void;
    jsGlDeleteShader(shader: number): void
    // pub extern "graphics" fn jsGlCreateProgram() u32;
    jsGlCreateProgram(): number
    // pub extern "graphics" fn jsGlAttachShader(program: u32, shader: u32) void;
    jsGlAttachShader(program: number, shader: number): void
    // pub extern "graphics" fn jsGlDetachShader(program: u32, shader: u32) void;
    jsGlDetachShader(program: number, shader: number): void
    // pub extern "graphics" fn jsGlLinkProgram(program: u32) void;
    jsGlLinkProgram(program: number): void
    // pub extern "graphics" fn jsGlGetProgramParameterInt(program: u32, pname: u32) i32;
    jsGlGetProgramParameterInt(program: number, pname: number): number
    // pub extern "graphics" fn jsGlGetProgramInfoLog(program: u32, buf_size: u32, log_ptr: *u8) u32;
    jsGlGetProgramInfoLog(program: number, buf_size: number, log_ptr: number): number
    // pub extern "graphics" fn jsGlGetShaderiv(program: u32, pname: u32, ptr: *u8) void;
    jsGlGetShaderiv(program: number, pname: number, ptr: number): void
    // pub extern "graphics" fn jsGlGetProgramiv(program: u32, pname: u32, ptr: *u8) void;
    jsGlGetProgramiv(program: number, pname: number, ptr: number): void
    // pub extern "graphics" fn jsGlDeleteProgram(program: u32) void;
    jsGlDeleteProgram(program: number): void
    // pub extern "graphics" fn jsGlCreateVertexArray() u32;
    jsGlCreateVertexArray(): number
    // pub extern "graphics" fn jsGlDrawArraysInstanced(mode: u32, first: u32, count: u32, instanceCount: u32) void;
    jsGlDrawArraysInstanced(mode: number, first: number, count: number, instanceCount: number): void
    // pub extern "graphics" fn jsGlDrawArrays(mode: u32, first: i32, count: i32) void;
    jsGlDrawArrays(mode: number, first: number, count: number): void
    // pub extern "graphics" fn jsGlTexParameteri(target: u32, pname: u32, param: i32) void;
    jsGlTexParameteri(target: number, pname: number, param: number): void
    // pub extern "graphics" fn jsGlTexImage2D(target: u32, level: i32, internal_format: i32, width: i32, height: i32, border: i32, format: u32, type: u32, pixels: ?*const u8) void;
    jsGlTexImage2D(target: number, level: number, internal_format: number, width: number, height: number, border: number, format: number, type: number, pixels: number): void
    // pub extern "graphics" fn jsGlTexSubImage2D(target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, type: u32, pixels: ?*const u8) void;
    jsGlTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: number): void
    // pub extern "graphics" fn jsGlCreateBuffer() u32;
    jsGlCreateBuffer(): number
    // pub extern "graphics" fn jsGlVertexAttribPointer(index: u32, size: i32, type: u32, normalized: u32, stride: i32, pointer: ?*const anyopaque) void;
    jsGlVertexAttribPointer(index: number, size: number, type: number, normalized: number, stride: number, pointer: number): void
    // pub extern "graphics" fn jsGlActiveTexture(texture: u32) void;
    jsGlActiveTexture(texture: number): void
    // pub extern "graphics" fn jsGlVertexAttribDivisor(index: u32, divisor: u32) void;
    jsGlVertexAttribDivisor(index: number, divisor: number): void
    // pub extern "graphics" fn jsGlDeleteTexture(texture: u32) void;
    jsGlDeleteTexture(texture: number): void
    // pub extern "graphics" fn jsGlUseProgram(program: u32) void;
    jsGlUseProgram(program: number): void
    // pub extern "graphics" fn jsGlUniformMatrix4fv(location: i32, transpose: c_uint, value_ptr: [*c]const f32) void;
    jsGlUniformMatrix4fv(location: number, transpose: number, value_ptr: number): void
    // pub extern "graphics" fn jsGlUniformMatrix3fv(location: i32, transpose: c_uint, value_ptr: [*c]const f32) void;
    jsGlUniformMatrix3fv(location: number, transpose: number, value_ptr: number): void
    // pub extern "graphics" fn jsGlUniform1i(location: i32, val: i32) void;
    jsGlUniform1i(location: number, val: number): void
    // pub extern "graphics" fn jsGlUniform1fv(location: i32, value_ptr: [*c]const f32) void;
    jsGlUniform1fv(location: number, value_ptr: number): void
    // pub extern "graphics" fn jsGlUniform2fv(location: i32, value_ptr: [*c]const f32) void;
    jsGlUniform2fv(location: number, value_ptr: number): void
    // pub extern "graphics" fn jsGlUniform3fv(location: i32, value_ptr: [*c]const f32) void;
    jsGlUniform3fv(location: number, value_ptr: number): void
    // pub extern "graphics" fn jsGlUniform4fv(location: i32, value_ptr: [*c]const f32) void;
    jsGlUniform4fv(location: number, value_ptr: number): void
    // pub extern "graphics" fn jsGlDrawElements(mode: u32, num_indices: u32, index_type: u32, index_offset: u32) void;
    jsGlDrawElements(mode: number, num_indices: number, index_type: number, index_offset: number): void
    // pub extern "graphics" fn jsGlCreateRenderbuffer() u32;
    jsGlCreateRenderbuffer(): number
    // pub extern "graphics" fn jsGlPolygonOffset(factor: f32, units: f32) void;
    jsGlPolygonOffset(factor: number, units: number): void
    // pub extern "graphics" fn jsGlFramebufferRenderbuffer(target: u32, attachment: u32, renderbuffertarget: u32, renderbuffer: u32) void;
    jsGlFramebufferRenderbuffer(target: number, attachment: number, renderbuffertarget: number, renderbuffer: number): void
    // pub extern "graphics" fn jsGlFramebufferTexture2D(target: u32, attachment: u32, textarget: u32, texture: u32, level: i32) void;
    jsGlFramebufferTexture2D(target: number, attachment: number, textarget: number, texture: number, level: number): void
    // pub extern "graphics" fn jsGlViewport(x: i32, y: i32, width: i32, height: i32) void;
    jsGlViewport(x: number, y: number, width: number, height: number): void
    // pub extern "graphics" fn jsGlClear(mask: u32) void;
    jsGlClear(mask: number): void
    // pub extern "graphics" fn jsGlLineWidth(width: f32) void;
    jsGlLineWidth(width: number): void
    // pub extern "graphics" fn jsGlBlendFunc(sfactor: u32, dfactor: u32) void;
    jsGlBlendFunc(sfactor: number, dfactor: number): void
    // pub extern "graphics" fn jsGlBlitFramebuffer(srcX0: i32, srcY0: i32, srcX1: i32, srcY1: i32, dstX0: i32, dstY0: i32, dstX1: i32, dstY1: i32, mask: u32, filter: u32) void;
    jsGlBlitFramebuffer(srcX0: number, srcY0: number, srcX1: number, srcY1: number, dstX0: number, dstY0: number, dstX1: number, dstY1: number, mask: number, filter: number): void
    // pub extern "graphics" fn jsGlBlendEquation(mode: u32) void;
    jsGlBlendEquation(mode: number): void
    // pub extern "graphics" fn jsGlScissor(x: i32, y: i32, width: i32, height: i32) void;
    jsGlScissor(x: number, y: number, width: number, height: number): void
    // pub extern "graphics" fn jsGlGetUniformLocation(program: u32, name_ptr: *const u8, name_len: u32) u32;
    jsGlGetUniformLocation(program: number, name_ptr: number, name_len: number): number
    // pub extern "graphics" fn jsGlCheckFramebufferStatus(target: u32) u32;
    jsGlCheckFramebufferStatus(target: number): number
    // pub extern "graphics" fn jsGlDeleteVertexArray(vao: u32) void;
    jsGlDeleteVertexArray(vao: number): void
    // pub extern "graphics" fn jsGlDeleteBuffer(buffer: u32) void;
    jsGlDeleteBuffer(buffer: number): void
    // pub extern "graphics" fn jsGlFlush() void;
    jsGlFlush(): void
    // pub extern "graphics" fn jsGlFinish() void;
    jsGlFinish(): void
  }
}